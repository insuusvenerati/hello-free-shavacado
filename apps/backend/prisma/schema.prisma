generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model Ingredient {
  createdAt         DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime? @updatedAt
  id                String    @id @default(dbgenerated("fn_ksuid()"))
  country           String?
  type              String?
  slug              String?
  description       String?
  internalName      String?   @map("internal_name")
  shipped           Boolean?
  imageLink         String?   @map("image_link")
  imagePath         String?   @map("image_path")
  usage             Int?
  hasDuplicatedName Boolean?
  uuid              String?
  name              String?
  allergens         Json[]
  family            Json?

  @@map("ingredient")
}

model Hellofresh {
  createdAt   DateTime?                @default(now()) @map("created_at") @db.Timestamptz(6)
  recipe      Json?
  id          String                   @id @default(dbgenerated("fn_ksuid()"))
  updatedAt   DateTime?                @updatedAt
  name        String?
  description String?
  textSearch  Unsupported("tsvector")? @default(dbgenerated("(setweight(to_tsvector('english'::regconfig, COALESCE(name, ''::text)), 'A'::\"char\") || setweight(to_tsvector('english'::regconfig, COALESCE(description, ''::text)), 'B'::\"char\"))"))

  @@index([textSearch], type: Gin)
  @@map("hellofresh")
}

model PopularRecipe {
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime? @updatedAt
  name      String?
  recipe    Json?
  id        String    @id @default(dbgenerated("fn_ksuid()"))

  @@map("popular_recipe")
}

model Recipe {
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  userId    String?   @map("user_id")
  name      String?
  imagePath String?   @map("image_path")
  id        String    @id @default(dbgenerated("fn_ksuid()"))
  slug      String    @unique
  uuid      String    @unique
  updatedAt DateTime? @updatedAt
  groceries Grocery[]

  @@map("recipe")
}

model Grocery {
  createdAt  DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  ingredient String
  amount     Float?    @default(1)
  unit       String?
  imagePath  String?   @map("image_path")
  id         String    @id @default(dbgenerated("fn_ksuid()"))
  userId     String    @map("user_id")
  family     String
  slug       String
  uuid       String
  recipeId   String    @map("recipe_id")
  updatedAt  DateTime? @updatedAt
  recipe     Recipe    @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@map("grocery")
}

model ImportedRecipe {
  id                      String    @id @default(dbgenerated("fn_ksuid()"))
  name                    String
  image                   String
  description             String
  cookTime                String    @map("cook_time")
  prepTime                String    @map("prep_time")
  totalTime               String    @map("total_time")
  keywords                String[]
  recipeCategories        String[]
  recipeCuisines          String[]
  recipeIngredients       String[]
  recipeInstructions      String[]
  recipeTypes             String[]
  recipeYield             String
  cookTimeOriginalFormat  String?   @map("cooktime_original_format")
  prepTimeOriginalFormat  String?   @map("preptime_original_format")
  totalTimeOriginalFormat String?   @map("totaltime_original_format")
  url                     String
  userId                  String    @map("user_id")
  createdAt               DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt               DateTime? @updatedAt
}
