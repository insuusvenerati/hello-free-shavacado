-- This script was generated by the Schema Diff utility in pgAdmin 4
-- For the circular dependencies, the order in which Schema Diff writes the objects is not very sophisticated
-- and may require manual changes to the script to ensure changes are applied in the correct order.
-- Please report an issue for any failure with the reproduction steps.
CREATE OR REPLACE FUNCTION public.requesting_user_id() RETURNS text LANGUAGE 'sql' COST 100 STABLE PARALLEL UNSAFE AS $BODY$
select nullif(
        current_setting('request.jwt.claims', true)::json->>'sub',
        ''
    )::text;
$BODY$;
ALTER FUNCTION public.requesting_user_id() OWNER TO supabase_admin;
GRANT EXECUTE ON FUNCTION public.requesting_user_id() TO PUBLIC;
GRANT EXECUTE ON FUNCTION public.requesting_user_id() TO anon;
GRANT EXECUTE ON FUNCTION public.requesting_user_id() TO authenticated;
GRANT EXECUTE ON FUNCTION public.requesting_user_id() TO postgres;
GRANT EXECUTE ON FUNCTION public.requesting_user_id() TO service_role;
GRANT EXECUTE ON FUNCTION public.requesting_user_id() TO supabase_admin;
CREATE TABLE IF NOT EXISTS public.hellofresh (
    uid bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY (
        INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1
    ),
    created_at timestamp with time zone DEFAULT now(),
    recipe jsonb,
    id text COLLATE pg_catalog."default",
    CONSTRAINT hellofresh_pkey PRIMARY KEY (uid),
    CONSTRAINT hellofresh_id_key UNIQUE (id)
) TABLESPACE pg_default;
ALTER TABLE IF EXISTS public.hellofresh OWNER to postgres;
GRANT ALL ON TABLE public.hellofresh TO authenticated;
GRANT ALL ON TABLE public.hellofresh TO postgres;
GRANT ALL ON TABLE public.hellofresh TO anon;
GRANT ALL ON TABLE public.hellofresh TO service_role;
CREATE TABLE IF NOT EXISTS public.recipes (
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY (
        INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1
    ),
    created_at timestamp with time zone DEFAULT now(),
    recipe text COLLATE pg_catalog."default" NOT NULL,
    user_id text COLLATE pg_catalog."default",
    name text COLLATE pg_catalog."default" DEFAULT ''::text,
    image_path text COLLATE pg_catalog."default",
    CONSTRAINT recipes_pkey PRIMARY KEY (id),
    CONSTRAINT recipes_recipe_key UNIQUE (recipe)
) TABLESPACE pg_default;
ALTER TABLE IF EXISTS public.recipes OWNER to supabase_admin;
ALTER TABLE IF EXISTS public.recipes ENABLE ROW LEVEL SECURITY;
GRANT ALL ON TABLE public.recipes TO anon;
GRANT ALL ON TABLE public.recipes TO postgres;
GRANT ALL ON TABLE public.recipes TO supabase_admin;
GRANT ALL ON TABLE public.recipes TO authenticated;
GRANT ALL ON TABLE public.recipes TO service_role;
CREATE POLICY "Users can delete their own recipes" ON public.recipes AS PERMISSIVE FOR DELETE TO public USING ((requesting_user_id() = user_id));
CREATE POLICY "Users can insert their own recipes" ON public.recipes AS PERMISSIVE FOR
INSERT TO public WITH CHECK ((requesting_user_id() = user_id));
CREATE POLICY "Users can select their own recipes" ON public.recipes AS PERMISSIVE FOR
SELECT TO public USING ((requesting_user_id() = user_id));
-- DROP FUNCTION IF EXISTS graphql.cache_key(role regrole, ast jsonb, variables jsonb);
-- DROP FUNCTION IF EXISTS graphql.build_update(ast jsonb, variable_definitions jsonb, variables jsonb, parent_type text, parent_block_name text);
-- DROP FUNCTION IF EXISTS graphql.build_insert(ast jsonb, variable_definitions jsonb, variables jsonb, parent_type text);
-- DROP FUNCTION IF EXISTS graphql.build_delete(ast jsonb, variable_definitions jsonb, variables jsonb, parent_type text, parent_block_name text);