-- This script was generated by the Schema Diff utility in pgAdmin 4
-- For the circular dependencies, the order in which Schema Diff writes the objects is not very sophisticated
-- and may require manual changes to the script to ensure changes are applied in the correct order.
-- Please report an issue for any failure with the reproduction steps.
CREATE OR REPLACE FUNCTION public.fn_ksuid() RETURNS text LANGUAGE 'plpgsql' COST 100 VOLATILE PARALLEL UNSAFE AS $BODY$
declare v_time timestamp with time zone := null;
v_seconds numeric := null;
v_payload bytea := null;
v_numeric numeric := null;
v_base62 text := '';
v_epoch numeric = 1400000000;
-- 2014-05-13T16:53:20Z
v_alphabet char array [62] := array [
		'0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
		'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J',
		'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 
		'U', 'V', 'W', 'X', 'Y', 'Z', 
		'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 
		'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
		'u', 'v', 'w', 'x', 'y', 'z'];
i integer := 0;
begin -- Get the current time
v_time := clock_timestamp();
-- Extract seconds from the current time and apply epoch
v_seconds := EXTRACT(
	EPOCH
	FROM v_time
) - v_epoch;
-- Generate a numeric value from the seconds
v_numeric := v_seconds * pow(2::numeric, 128);
-- Generate a pseudo-random payload
-- v_payload := gen_random_bytes(16); -- to be used with `pgcrypto`
v_payload := decode(
	md5(v_time::text || random()::text || random()::text),
	'hex'
);
-------------------------------------------------------------------
-- FOR TEST: the expected result is '0ujtsYcgvSTl8PAuAdqWYSMnLOv'
-------------------------------------------------------------------
-- v_numeric := 107608047 * pow(2::numeric, 128);
-- v_payload := decode('B5A1CD34B5F99D1154FB6853345C9735', 'hex');
-- Add the payload to the numeric value
while i < 16 loop i := i + 1;
v_numeric := v_numeric + (
	get_byte(v_payload, i - 1) * pow(2::numeric, (16 - i) * 8)
);
end loop;
-- Encode the numeric value to base62
while v_numeric <> 0 loop v_base62 := v_base62 || v_alphabet [mod(v_numeric, 62) + 1];
v_numeric := div(v_numeric, 62);
end loop;
v_base62 := reverse(v_base62);
v_base62 := lpad(v_base62, 27, '0');
return v_base62;
end $BODY$;
ALTER FUNCTION public.fn_ksuid() OWNER TO postgres;
GRANT EXECUTE ON FUNCTION public.fn_ksuid() TO PUBLIC;
GRANT EXECUTE ON FUNCTION public.fn_ksuid() TO anon;
GRANT EXECUTE ON FUNCTION public.fn_ksuid() TO authenticated;
GRANT EXECUTE ON FUNCTION public.fn_ksuid() TO postgres;
GRANT EXECUTE ON FUNCTION public.fn_ksuid() TO service_role;
CREATE OR REPLACE FUNCTION public.requesting_user_id() RETURNS text LANGUAGE 'sql' COST 100 STABLE PARALLEL UNSAFE AS $BODY$
select nullif(
		current_setting('request.jwt.claims', true)::json->>'sub',
		''
	)::text;
$BODY$;
ALTER FUNCTION public.requesting_user_id() OWNER TO supabase_admin;
GRANT EXECUTE ON FUNCTION public.requesting_user_id() TO PUBLIC;
GRANT EXECUTE ON FUNCTION public.requesting_user_id() TO anon;
GRANT EXECUTE ON FUNCTION public.requesting_user_id() TO authenticated;
GRANT EXECUTE ON FUNCTION public.requesting_user_id() TO postgres;
GRANT EXECUTE ON FUNCTION public.requesting_user_id() TO service_role;
GRANT EXECUTE ON FUNCTION public.requesting_user_id() TO supabase_admin;
CREATE TABLE IF NOT EXISTS public.hellofresh (
	created_at timestamp with time zone DEFAULT now(),
	recipe jsonb,
	id text NOT NULL DEFAULT public.fn_ksuid(),
	CONSTRAINT hellofresh_pkey PRIMARY KEY (id)
) TABLESPACE pg_default;
ALTER TABLE IF EXISTS public.hellofresh OWNER to postgres;
GRANT ALL ON TABLE public.hellofresh TO anon;
GRANT ALL ON TABLE public.hellofresh TO authenticated;
GRANT ALL ON TABLE public.hellofresh TO postgres;
GRANT ALL ON TABLE public.hellofresh TO service_role;
CREATE TABLE IF NOT EXISTS public.recipes (
	created_at timestamp with time zone DEFAULT now(),
	recipe text COLLATE pg_catalog."default" NOT NULL,
	user_id text COLLATE pg_catalog."default",
	name text COLLATE pg_catalog."default" DEFAULT ''::text,
	image_path text COLLATE pg_catalog."default",
	id text NOT NULL DEFAULT public.fn_ksuid(),
	CONSTRAINT recipes_pkey PRIMARY KEY (id),
	CONSTRAINT recipes_recipe_key UNIQUE (recipe)
) TABLESPACE pg_default;
ALTER TABLE IF EXISTS public.recipes OWNER to supabase_admin;
ALTER TABLE IF EXISTS public.recipes ENABLE ROW LEVEL SECURITY;
GRANT ALL ON TABLE public.recipes TO anon;
GRANT ALL ON TABLE public.recipes TO authenticated;
GRANT ALL ON TABLE public.recipes TO postgres;
GRANT ALL ON TABLE public.recipes TO service_role;
GRANT ALL ON TABLE public.recipes TO supabase_admin;
CREATE POLICY "Users can delete their own recipes" ON public.recipes AS PERMISSIVE FOR DELETE TO public USING ((requesting_user_id() = user_id));
CREATE POLICY "Users can insert their own recipes" ON public.recipes AS PERMISSIVE FOR
INSERT TO public WITH CHECK ((requesting_user_id() = user_id));
CREATE POLICY "Users can select their own recipes" ON public.recipes AS PERMISSIVE FOR
SELECT TO public USING ((requesting_user_id() = user_id));