{"mappings":";;;;;;;;;;;;;;;;;;AkBSA,qBAAqB;IACnB,IAAI,EAAE,MAAM,CAAC;IACb,KAAK,EAAE,MAAM,CAAC;IACd,WAAW,EAAE,MAAM,CAAC;IACpB,QAAQ,EAAE,MAAM,CAAC;IACjB,QAAQ,EAAE,MAAM,CAAC;IACjB,SAAS,EAAE,MAAM,CAAC;IAClB,WAAW,EAAE,MAAM,CAAC;IACpB,iBAAiB,EAAE,MAAM,EAAE,CAAC;IAC5B,kBAAkB,EAAE,MAAM,EAAE,CAAC;IAC7B,gBAAgB,EAAE,MAAM,EAAE,CAAC;IAC3B,cAAc,EAAE,MAAM,EAAE,CAAC;IACzB,WAAW,EAAE,MAAM,EAAE,CAAC;IACtB,QAAQ,EAAE,MAAM,EAAE,CAAC;CACpB,CAAC;8BAEyB,MAAM;SAA2B,MAAM;;AAAlE,wBAgDE","sources":["src/src/utils/logger.js","src/src/dataTransformers/consolidateRecipeProperties.js","src/src/dataTransformers/transformImage.js","src/src/dataTransformers/transformToList.js","src/src/dataTransformers/transformToString.js","src/src/utils/transformIsoToString.js","src/src/dataTransformers/transformToTime.js","src/src/utils/regex.js","src/src/utils/cleanString.js","src/src/dataTransformers/transformToCleanString.js","src/src/dataTransformers/transformInstructions.js","src/src/utils/cleanIngredientAmounts.js","src/src/dataTransformers/transformIngredients.js","src/src/dataTransformers/propertyTransformerMap.js","src/src/dataTransformers/buildRecipeModel.js","src/src/scrapers/Scraper.js","src/src/scrapers/MicrodataScraper.js","src/src/scrapers/JsonLdScraper.js","src/src/main.ts","src/main.ts"],"sourcesContent":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"import axios from \"axios\";\nimport { load } from \"cheerio\";\nimport MicrodataScraper from \"./scrapers/MicrodataScraper\";\nimport JsonLdScraper from \"./scrapers/JsonLdScraper\";\nimport logger from \"./utils/logger\";\nimport type { CheerioAPI } from \"cheerio\";\n\nconst errorMessage = \"Could not find recipe data\";\n\nexport type Recipe = {\n  name: string;\n  image: string;\n  description: string;\n  cookTime: string;\n  prepTime: string;\n  totalTime: string;\n  recipeYield: string;\n  recipeIngredients: string[];\n  recipeInstructions: string[];\n  recipeCategories: string[];\n  recipeCuisines: string[];\n  recipeTypes: string[];\n  keywords: string[];\n};\n\nexport default async (url: string): Promise<Recipe & { url: string }> => {\n  let chtml: CheerioAPI;\n\n  try {\n    // load html from scraped url\n    const resp = await axios(url);\n\n    chtml = load(resp.data);\n  } catch (error) {\n    throw new Error(errorMessage);\n  }\n\n  try {\n    // attempt to find JsonLd data, return recipe or log and continue\n    const jsonLdScraper = new JsonLdScraper(chtml);\n    const recipe = jsonLdScraper.getRecipe();\n\n    return {\n      ...(recipe as Omit<Recipe, \"url\">),\n      url,\n    };\n  } catch (error) {\n    logger(\"main:JsonLdScraper\", {\n      error,\n      url,\n    });\n  }\n\n  // attempt to find microdata, return recipe or log and continue\n  try {\n    const microdataScraper = new MicrodataScraper(chtml);\n    const recipe = microdataScraper.getRecipe();\n\n    return {\n      ...recipe,\n      url,\n    };\n  } catch (error) {\n    logger(\"main:MicrodataScraper\", {\n      error,\n      url,\n    });\n  }\n\n  // could add a Scraper for rdfa in the future\n\n  // throw if no recipe found\n  throw new Error(errorMessage);\n};\n"],"names":[],"version":3,"file":"index.d.ts.map"}